# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PackagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_production_usage(self, repo_kind_param, repo_name, package_name, org_name, **kwargs):  # noqa: E501
        """Add organization to package's production users list  # noqa: E501

        Add organization to package's production users list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_production_usage(repo_kind_param, repo_name, package_name, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, **kwargs)  # noqa: E501
            return data

    def add_production_usage_with_http_info(self, repo_kind_param, repo_name, package_name, org_name, **kwargs):  # noqa: E501
        """Add organization to package's production users list  # noqa: E501

        Add organization to package's production users list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_kind_param', 'repo_name', 'package_name', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_production_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_kind_param' is set
        if ('repo_kind_param' not in params or
                params['repo_kind_param'] is None):
            raise ValueError("Missing the required parameter `repo_kind_param` when calling `add_production_usage`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `add_production_usage`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `add_production_usage`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `add_production_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_kind_param' in params:
            path_params['repoKindParam'] = params['repo_kind_param']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{repoKindParam}/{repoName}/{packageName}/production-usage/${orgName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_production_usage(self, repo_kind_param, repo_name, package_name, org_name, **kwargs):  # noqa: E501
        """Delete organization from package's production usage list  # noqa: E501

        Delete organization from package's production usage list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_production_usage(repo_kind_param, repo_name, package_name, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, **kwargs)  # noqa: E501
            return data

    def delete_production_usage_with_http_info(self, repo_kind_param, repo_name, package_name, org_name, **kwargs):  # noqa: E501
        """Delete organization from package's production usage list  # noqa: E501

        Delete organization from package's production usage list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_production_usage_with_http_info(repo_kind_param, repo_name, package_name, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_kind_param', 'repo_name', 'package_name', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_production_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_kind_param' is set
        if ('repo_kind_param' not in params or
                params['repo_kind_param'] is None):
            raise ValueError("Missing the required parameter `repo_kind_param` when calling `delete_production_usage`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_production_usage`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `delete_production_usage`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `delete_production_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_kind_param' in params:
            path_params['repoKindParam'] = params['repo_kind_param']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{repoKindParam}/{repoName}/{packageName}/production-usage/${orgName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_changelog_md(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package's changelog in markdown format  # noqa: E501

        Get package's changelog in markdown format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_changelog_md(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_changelog_md_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_changelog_md_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def generate_changelog_md_with_http_info(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package's changelog in markdown format  # noqa: E501

        Get package's changelog in markdown format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_changelog_md_with_http_info(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_kind_param', 'repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_changelog_md" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_kind_param' is set
        if ('repo_kind_param' not in params or
                params['repo_kind_param'] is None):
            raise ValueError("Missing the required parameter `repo_kind_param` when calling `generate_changelog_md`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `generate_changelog_md`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `generate_changelog_md`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_kind_param' in params:
            path_params['repoKindParam'] = params['repo_kind_param']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/markdown', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{repoKindParam}/{repoName}/{packageName}/changelog.md', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_argo_templates_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_argo_templates_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: ArgoTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_argo_templates_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_argo_templates_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_argo_templates_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_argo_templates_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: ArgoTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_argo_templates_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_argo_templates_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_argo_templates_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/argo-template/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArgoTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_argo_templates_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_argo_templates_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: ArgoTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_argo_templates_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_argo_templates_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_argo_templates_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_argo_templates_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: ArgoTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_argo_templates_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_argo_templates_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_argo_templates_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_argo_templates_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/argo-template/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArgoTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backstage_plugins_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backstage_plugins_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: BackstagePlugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backstage_plugins_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_backstage_plugins_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_backstage_plugins_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backstage_plugins_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: BackstagePlugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backstage_plugins_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_backstage_plugins_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_backstage_plugins_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/backstage/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackstagePlugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backstage_plugins_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backstage_plugins_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: BackstagePlugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backstage_plugins_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_backstage_plugins_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_backstage_plugins_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backstage_plugins_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: BackstagePlugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backstage_plugins_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_backstage_plugins_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_backstage_plugins_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_backstage_plugins_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/backstage/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackstagePlugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chart_values(self, package_id, version, **kwargs):  # noqa: E501
        """Get chart values  # noqa: E501

        Get chart values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chart_values(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chart_values_with_http_info(package_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_chart_values_with_http_info(package_id, version, **kwargs)  # noqa: E501
            return data

    def get_chart_values_with_http_info(self, package_id, version, **kwargs):  # noqa: E501
        """Get chart values  # noqa: E501

        Get chart values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chart_values_with_http_info(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chart_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_chart_values`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_chart_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/yaml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/{version}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_image_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get container image details  # noqa: E501

        Get container image details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_image_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: ContainerImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_image_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_image_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_container_image_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get container image details  # noqa: E501

        Get container image details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_image_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: ContainerImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_image_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_container_image_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_container_image_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/container/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_image_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get container image details  # noqa: E501

        Get container image details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_image_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: ContainerImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_image_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_image_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_container_image_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get container image details  # noqa: E501

        Get container image details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_image_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: ContainerImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_image_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_container_image_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_container_image_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_container_image_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/container/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_core_dns_plugin_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_dns_plugin_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: CoreDNSPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_core_dns_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_core_dns_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_core_dns_plugin_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_dns_plugin_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: CoreDNSPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_core_dns_plugin_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_core_dns_plugin_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_core_dns_plugin_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/coredns/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreDNSPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_core_dns_plugin_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_dns_plugin_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: CoreDNSPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_core_dns_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_core_dns_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_core_dns_plugin_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_core_dns_plugin_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: CoreDNSPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_core_dns_plugin_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_core_dns_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_core_dns_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_core_dns_plugin_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/coredns/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreDNSPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_falco_rules_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_falco_rules_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: FalcoPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_falco_rules_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_falco_rules_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_falco_rules_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_falco_rules_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: FalcoPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_falco_rules_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_falco_rules_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_falco_rules_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/falco/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FalcoPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_falco_rules_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_falco_rules_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: FalcoPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_falco_rules_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_falco_rules_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_falco_rules_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_falco_rules_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: FalcoPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_falco_rules_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_falco_rules_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_falco_rules_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_falco_rules_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/falco/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FalcoPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gatekeeper_policies_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gatekeeper_policies_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: GatekeeperPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gatekeeper_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gatekeeper_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_gatekeeper_policies_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gatekeeper_policies_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: GatekeeperPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gatekeeper_policies_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_gatekeeper_policies_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_gatekeeper_policies_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/gatekeeper/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GatekeeperPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gatekeeper_policies_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gatekeeper_policies_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: GatekeeperPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gatekeeper_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gatekeeper_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_gatekeeper_policies_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gatekeeper_policies_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: GatekeeperPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gatekeeper_policies_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_gatekeeper_policies_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_gatekeeper_policies_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_gatekeeper_policies_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/gatekeeper/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GatekeeperPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_helm_chart_templates(self, package_id, version, **kwargs):  # noqa: E501
        """Get the templates for a Helm chart package  # noqa: E501

        Get the templates for a Helm chart package  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_chart_templates(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_helm_chart_templates_with_http_info(package_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_helm_chart_templates_with_http_info(package_id, version, **kwargs)  # noqa: E501
            return data

    def get_helm_chart_templates_with_http_info(self, package_id, version, **kwargs):  # noqa: E501
        """Get the templates for a Helm chart package  # noqa: E501

        Get the templates for a Helm chart package  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_chart_templates_with_http_info(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_helm_chart_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_helm_chart_templates`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_helm_chart_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/{version}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_helm_package_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_package_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: HelmPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_helm_package_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_helm_package_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_helm_package_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_package_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: HelmPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_helm_package_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_helm_package_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_helm_package_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/helm/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HelmPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_helm_package_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_package_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: HelmPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_helm_package_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_helm_package_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_helm_package_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_package_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: HelmPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_helm_package_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_helm_package_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_helm_package_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_helm_package_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/helm/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HelmPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_helm_plugin_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_plugin_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: HelmPluginPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_helm_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_helm_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_helm_plugin_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_plugin_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: HelmPluginPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_helm_plugin_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_helm_plugin_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_helm_plugin_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/helm-plugin/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HelmPluginPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_helm_plugin_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_plugin_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: HelmPluginPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_helm_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_helm_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_helm_plugin_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_helm_plugin_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: HelmPluginPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_helm_plugin_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_helm_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_helm_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_helm_plugin_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/helm-plugin/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HelmPluginPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keda_scaler_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keda_scaler_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KedaScalerPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keda_scaler_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keda_scaler_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_keda_scaler_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keda_scaler_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KedaScalerPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keda_scaler_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_keda_scaler_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_keda_scaler_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/keda-scaler/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KedaScalerPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keda_scaler_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keda_scaler_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KedaScalerPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keda_scaler_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keda_scaler_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_keda_scaler_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keda_scaler_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KedaScalerPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keda_scaler_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_keda_scaler_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_keda_scaler_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_keda_scaler_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/keda-scaler/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KedaScalerPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keptn_integrations_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keptn_integrations_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KeptnIntegrationsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keptn_integrations_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keptn_integrations_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_keptn_integrations_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keptn_integrations_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KeptnIntegrationsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keptn_integrations_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_keptn_integrations_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_keptn_integrations_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/keptn/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeptnIntegrationsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keptn_integrations_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keptn_integrations_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KeptnIntegrationsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keptn_integrations_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keptn_integrations_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_keptn_integrations_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keptn_integrations_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KeptnIntegrationsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keptn_integrations_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_keptn_integrations_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_keptn_integrations_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_keptn_integrations_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/keptn/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeptnIntegrationsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_knative_client_plugin_integrations_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_knative_client_plugin_integrations_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KnativeClientPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_knative_client_plugin_integrations_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_knative_client_plugin_integrations_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_knative_client_plugin_integrations_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_knative_client_plugin_integrations_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KnativeClientPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_knative_client_plugin_integrations_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_knative_client_plugin_integrations_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_knative_client_plugin_integrations_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/knative-client-plugin/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KnativeClientPluginsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_knative_client_plugins_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_knative_client_plugins_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KnativeClientPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_knative_client_plugins_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_knative_client_plugins_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_knative_client_plugins_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_knative_client_plugins_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KnativeClientPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_knative_client_plugins_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_knative_client_plugins_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_knative_client_plugins_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_knative_client_plugins_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/knative-client-plugin/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KnativeClientPluginsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kube_armor_policies_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_armor_policies_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KubeArmorPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kube_armor_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kube_armor_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_kube_armor_policies_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_armor_policies_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KubeArmorPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kube_armor_policies_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kube_armor_policies_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kube_armor_policies_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kubearmor/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubeArmorPoliciesPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kube_armor_policies_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_armor_policies_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KubeArmorPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kube_armor_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kube_armor_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_kube_armor_policies_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_armor_policies_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KubeArmorPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kube_armor_policies_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kube_armor_policies_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kube_armor_policies_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_kube_armor_policies_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kubearmor/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubeArmorPoliciesPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubectl_plugin_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubectl_plugin_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KrewPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubectl_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubectl_plugin_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_kubectl_plugin_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubectl_plugin_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KrewPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubectl_plugin_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kubectl_plugin_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kubectl_plugin_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/krew/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KrewPluginsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubectl_plugin_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubectl_plugin_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KrewPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubectl_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubectl_plugin_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_kubectl_plugin_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubectl_plugin_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KrewPluginsPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubectl_plugin_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kubectl_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kubectl_plugin_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_kubectl_plugin_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/krew/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KrewPluginsPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubewarden_policies_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubewarden_policies_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KubewardenPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubewarden_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubewarden_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_kubewarden_policies_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubewarden_policies_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KubewardenPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubewarden_policies_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kubewarden_policies_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kubewarden_policies_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kubewarden/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubewardenPoliciesPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kubewarden_policies_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubewarden_policies_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KubewardenPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kubewarden_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kubewarden_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_kubewarden_policies_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kubewarden_policies_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KubewardenPoliciesPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kubewarden_policies_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kubewarden_policies_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kubewarden_policies_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_kubewarden_policies_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kubewarden/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubewardenPoliciesPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kyverno_policies_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kyverno_policies_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KyvernoPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kyverno_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kyverno_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_kyverno_policies_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kyverno_policies_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: KyvernoPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kyverno_policies_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kyverno_policies_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kyverno_policies_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kyverno/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KyvernoPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kyverno_policies_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kyverno_policies_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KyvernoPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kyverno_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kyverno_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_kyverno_policies_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kyverno_policies_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: KyvernoPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kyverno_policies_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_kyverno_policies_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_kyverno_policies_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_kyverno_policies_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/kyverno/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KyvernoPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_olm_operator_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_olm_operator_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: OLMPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_olm_operator_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_olm_operator_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_olm_operator_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_olm_operator_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: OLMPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_olm_operator_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_olm_operator_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_olm_operator_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/olm/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OLMPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_olm_operator_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_olm_operator_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: OLMPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_olm_operator_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_olm_operator_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_olm_operator_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_olm_operator_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: OLMPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_olm_operator_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_olm_operator_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_olm_operator_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_olm_operator_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/olm/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OLMPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_opa_policies_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opa_policies_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: OPAPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_opa_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_opa_policies_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_opa_policies_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opa_policies_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: OPAPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opa_policies_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_opa_policies_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_opa_policies_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/opa/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OPAPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_opa_policies_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opa_policies_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: OPAPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_opa_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_opa_policies_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_opa_policies_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opa_policies_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: OPAPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opa_policies_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_opa_policies_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_opa_policies_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_opa_policies_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/opa/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OPAPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_changelog(self, package_id, **kwargs):  # noqa: E501
        """Get package changelogs  # noqa: E501

        Get package changelogs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_changelog(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_changelog_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_changelog_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_package_changelog_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Get package changelogs  # noqa: E501

        Get package changelogs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_changelog_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_changelog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_package_changelog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/changelog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2003]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_security_report(self, package_id, version, **kwargs):  # noqa: E501
        """Get package security report  # noqa: E501

        Get package security report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_security_report(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_security_report_with_http_info(package_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_security_report_with_http_info(package_id, version, **kwargs)  # noqa: E501
            return data

    def get_package_security_report_with_http_info(self, package_id, version, **kwargs):  # noqa: E501
        """Get package security report  # noqa: E501

        Get package security report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_security_report_with_http_info(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_security_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_package_security_report`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_package_security_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/{version}/security-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_stars(self, package_id, **kwargs):  # noqa: E501
        """Get package stars  # noqa: E501

        Get package stars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_stars(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_stars_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_stars_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_package_stars_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Get package stars  # noqa: E501

        Get package stars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_stars_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_stars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_package_stars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/stars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_stats(self, **kwargs):  # noqa: E501
        """Get the number of packages and releases registered  # noqa: E501

        Get the number of packages and releases registered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_package_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_package_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Get the number of packages and releases registered  # noqa: E501

        Get the number of packages and releases registered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_summary(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package summary details  # noqa: E501

        Get package summary details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_summary(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: PackageSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_summary_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_summary_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_package_summary_with_http_info(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package summary details  # noqa: E501

        Get package summary details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_summary_with_http_info(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: PackageSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_kind_param', 'repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_kind_param' is set
        if ('repo_kind_param' not in params or
                params['repo_kind_param'] is None):
            raise ValueError("Missing the required parameter `repo_kind_param` when calling `get_package_summary`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_package_summary`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_package_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_kind_param' in params:
            path_params['repoKindParam'] = params['repo_kind_param']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{repoKindParam}/{repoName}/{packageName}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_values_schema(self, package_id, version, **kwargs):  # noqa: E501
        """Get package values schema  # noqa: E501

        Get package values schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_values_schema(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_values_schema_with_http_info(package_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_values_schema_with_http_info(package_id, version, **kwargs)  # noqa: E501
            return data

    def get_package_values_schema_with_http_info(self, package_id, version, **kwargs):  # noqa: E501
        """Get package values schema  # noqa: E501

        Get package values schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_values_schema_with_http_info(package_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :param str version: Package version (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_values_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_package_values_schema`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_package_values_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/{version}/values-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_views(self, package_id, **kwargs):  # noqa: E501
        """Get the views of the package provided  # noqa: E501

        Get the views of the package provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_views(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_views_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_views_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_package_views_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Get the views of the package provided  # noqa: E501

        Get the views of the package provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_views_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_views" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_package_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/views', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_production_usage(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get a summary of which of the organizations the user belongs to are using the package in production  # noqa: E501

        Get a summary of which of the organizations the user belongs to are using the package in production  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_production_usage(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: list[ProductionUsageOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_production_usage_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_production_usage_with_http_info(repo_kind_param, repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_production_usage_with_http_info(self, repo_kind_param, repo_name, package_name, **kwargs):  # noqa: E501
        """Get a summary of which of the organizations the user belongs to are using the package in production  # noqa: E501

        Get a summary of which of the organizations the user belongs to are using the package in production  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_production_usage_with_http_info(repo_kind_param, repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepositoryKindParam repo_kind_param: Package kind name (required)
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: list[ProductionUsageOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_kind_param', 'repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_production_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_kind_param' is set
        if ('repo_kind_param' not in params or
                params['repo_kind_param'] is None):
            raise ValueError("Missing the required parameter `repo_kind_param` when calling `get_production_usage`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_production_usage`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_production_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_kind_param' in params:
            path_params['repoKindParam'] = params['repo_kind_param']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/markdown', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/{repoKindParam}/{repoName}/{packageName}/production-usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductionUsageOrganization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_random_packages(self, **kwargs):  # noqa: E501
        """Get some random packages  # noqa: E501

        Get some random packages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_packages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PackageSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_random_packages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_random_packages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_random_packages_with_http_info(self, **kwargs):  # noqa: E501
        """Get some random packages  # noqa: E501

        Get some random packages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_packages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PackageSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random_packages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/random', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PackageSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_starred_packages_by_user(self, **kwargs):  # noqa: E501
        """Get packages starred by user  # noqa: E501

        Get packages starred by user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_starred_packages_by_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :return: list[PackageSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_starred_packages_by_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_starred_packages_by_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_starred_packages_by_user_with_http_info(self, **kwargs):  # noqa: E501
        """Get packages starred by user  # noqa: E501

        Get packages starred by user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_starred_packages_by_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :return: list[PackageSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_starred_packages_by_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/packages/starred', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PackageSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tekton_pipeline_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_pipeline_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TektonPipelinePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tekton_pipeline_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tekton_pipeline_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_tekton_pipeline_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_pipeline_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TektonPipelinePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tekton_pipeline_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tekton_pipeline_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tekton_pipeline_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tekton-pipeline/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TektonPipelinePackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tekton_pipeline_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_pipeline_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TektonPipelinePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tekton_pipeline_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tekton_pipeline_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_tekton_pipeline_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_pipeline_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TektonPipelinePackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tekton_pipeline_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tekton_pipeline_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tekton_pipeline_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_tekton_pipeline_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tekton-pipeline/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TektonPipelinePackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tekton_task_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_task_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TektonTaskPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tekton_task_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tekton_task_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_tekton_task_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_task_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TektonTaskPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tekton_task_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tekton_task_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tekton_task_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tekton-task/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TektonTaskPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tekton_task_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_task_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TektonTaskPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tekton_task_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tekton_task_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_tekton_task_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tekton_task_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TektonTaskPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tekton_task_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tekton_task_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tekton_task_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_tekton_task_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tekton-task/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TektonTaskPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tinkerbell_actions_details(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tinkerbell_actions_details(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TBActionPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tinkerbell_actions_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tinkerbell_actions_details_with_http_info(repo_name, package_name, **kwargs)  # noqa: E501
            return data

    def get_tinkerbell_actions_details_with_http_info(self, repo_name, package_name, **kwargs):  # noqa: E501
        """Get package details  # noqa: E501

        Get package details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tinkerbell_actions_details_with_http_info(repo_name, package_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :return: TBActionPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tinkerbell_actions_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tinkerbell_actions_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tinkerbell_actions_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tbaction/{repoName}/{packageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TBActionPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tinkerbell_actions_version_details(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tinkerbell_actions_version_details(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TBActionPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tinkerbell_actions_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tinkerbell_actions_version_details_with_http_info(repo_name, package_name, version, **kwargs)  # noqa: E501
            return data

    def get_tinkerbell_actions_version_details_with_http_info(self, repo_name, package_name, version, **kwargs):  # noqa: E501
        """Get package version details  # noqa: E501

        Get package version details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tinkerbell_actions_version_details_with_http_info(repo_name, package_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str package_name: Package name (required)
        :param str version: Package version (required)
        :return: TBActionPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'package_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tinkerbell_actions_version_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `get_tinkerbell_actions_version_details`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params or
                params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `get_tinkerbell_actions_version_details`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_tinkerbell_actions_version_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/tbaction/{repoName}/{packageName}/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TBActionPackage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_packages(self, facets, **kwargs):  # noqa: E501
        """Search packages that meet the provided criteria  # noqa: E501

        Search packages that meet the provided criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_packages(facets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool facets: Whether we should get facets or not (required)
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :param str ts_query_web: Text search query (websearch format)
        :param list[RepositoryKind] kind: Repository kind:   * `0` - Helm charts   * `1` - Falco rules   * `2` - OPA policies   * `3` - OLM operators   * `4` - Tinkerbell actions   * `5` - Krew kubectl plugins   * `6` - Helm plugins   * `7` - Tekton tasks   * `8` - KEDA scalers   * `9` - Core DNS plugins   * `10` - Keptn integrations   * `11` - Tekton pipelines   * `12` - Container images   * `13` - Kubewarden policies   * `14` - Gatekeeper policies   * `15` - Kyverno policies   * `16` - Knative client plugins   * `17` - Backstage plugins   * `18` - Argo templates   * `19` - KubeArmor templates 
        :param list[int] category: Package category:   * `1` - AI / Machine learning   * `2` - Database   * `3` - Integration and delivery   * `4` - Monitoring and logging   * `5` - Networking   * `6` - Security   * `7` - Storage   * `8` - Streaming and messaging 
        :param list[str] user: List of aliases
        :param list[str] org: List of organization names
        :param list[str] repo: List of repository names
        :param list[str] license: List of SPDX identifiers
        :param list[str] capabilities: List of operator capability levels
        :param bool deprecated: Whether to include deprecated packages or not
        :param bool operators: Whether to get only operators
        :param bool verified_publisher: Whether to get only verified publisher
        :param bool official: Whether to get only official repositories
        :param bool cncf: Whether to get only pacakges published by CNCF projects
        :param str sort: Sort criteria
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_packages_with_http_info(facets, **kwargs)  # noqa: E501
        else:
            (data) = self.search_packages_with_http_info(facets, **kwargs)  # noqa: E501
            return data

    def search_packages_with_http_info(self, facets, **kwargs):  # noqa: E501
        """Search packages that meet the provided criteria  # noqa: E501

        Search packages that meet the provided criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_packages_with_http_info(facets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool facets: Whether we should get facets or not (required)
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :param str ts_query_web: Text search query (websearch format)
        :param list[RepositoryKind] kind: Repository kind:   * `0` - Helm charts   * `1` - Falco rules   * `2` - OPA policies   * `3` - OLM operators   * `4` - Tinkerbell actions   * `5` - Krew kubectl plugins   * `6` - Helm plugins   * `7` - Tekton tasks   * `8` - KEDA scalers   * `9` - Core DNS plugins   * `10` - Keptn integrations   * `11` - Tekton pipelines   * `12` - Container images   * `13` - Kubewarden policies   * `14` - Gatekeeper policies   * `15` - Kyverno policies   * `16` - Knative client plugins   * `17` - Backstage plugins   * `18` - Argo templates   * `19` - KubeArmor templates 
        :param list[int] category: Package category:   * `1` - AI / Machine learning   * `2` - Database   * `3` - Integration and delivery   * `4` - Monitoring and logging   * `5` - Networking   * `6` - Security   * `7` - Storage   * `8` - Streaming and messaging 
        :param list[str] user: List of aliases
        :param list[str] org: List of organization names
        :param list[str] repo: List of repository names
        :param list[str] license: List of SPDX identifiers
        :param list[str] capabilities: List of operator capability levels
        :param bool deprecated: Whether to include deprecated packages or not
        :param bool operators: Whether to get only operators
        :param bool verified_publisher: Whether to get only verified publisher
        :param bool official: Whether to get only official repositories
        :param bool cncf: Whether to get only pacakges published by CNCF projects
        :param str sort: Sort criteria
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['facets', 'offset', 'limit', 'ts_query_web', 'kind', 'category', 'user', 'org', 'repo', 'license', 'capabilities', 'deprecated', 'operators', 'verified_publisher', 'official', 'cncf', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_packages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'facets' is set
        if ('facets' not in params or
                params['facets'] is None):
            raise ValueError("Missing the required parameter `facets` when calling `search_packages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'facets' in params:
            query_params.append(('facets', params['facets']))  # noqa: E501
        if 'ts_query_web' in params:
            query_params.append(('ts_query_web', params['ts_query_web']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
            collection_formats['kind'] = 'multi'  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
            collection_formats['category'] = 'multi'  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
            collection_formats['user'] = 'multi'  # noqa: E501
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501
            collection_formats['org'] = 'multi'  # noqa: E501
        if 'repo' in params:
            query_params.append(('repo', params['repo']))  # noqa: E501
            collection_formats['repo'] = 'multi'  # noqa: E501
        if 'license' in params:
            query_params.append(('license', params['license']))  # noqa: E501
            collection_formats['license'] = 'multi'  # noqa: E501
        if 'capabilities' in params:
            query_params.append(('capabilities', params['capabilities']))  # noqa: E501
            collection_formats['capabilities'] = 'multi'  # noqa: E501
        if 'deprecated' in params:
            query_params.append(('deprecated', params['deprecated']))  # noqa: E501
        if 'operators' in params:
            query_params.append(('operators', params['operators']))  # noqa: E501
        if 'verified_publisher' in params:
            query_params.append(('verified_publisher', params['verified_publisher']))  # noqa: E501
        if 'official' in params:
            query_params.append(('official', params['official']))  # noqa: E501
        if 'cncf' in params:
            query_params.append(('cncf', params['cncf']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packages/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_package_star(self, package_id, **kwargs):  # noqa: E501
        """Toggle package's star  # noqa: E501

        Toggle package's star  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_package_star(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_package_star_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_package_star_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def toggle_package_star_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """Toggle package's star  # noqa: E501

        Toggle package's star  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_package_star_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: Package ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_package_star" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params or
                params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `toggle_package_star`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageID'] = params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageID}/stars', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
