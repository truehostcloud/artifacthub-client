# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.package import Package  # noqa: F401,E501

class HelmPackage(Package):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sign_key': 'HelmPackageSignKey',
        'crds': 'list[HelmPackageCrds]',
        'crds_examples': 'list[dict(str, object)]',
        'data': 'HelmPackageData'
    }
    if hasattr(Package, "swagger_types"):
        swagger_types.update(Package.swagger_types)

    attribute_map = {
        'sign_key': 'sign_key',
        'crds': 'crds',
        'crds_examples': 'crds_examples',
        'data': 'data'
    }
    if hasattr(Package, "attribute_map"):
        attribute_map.update(Package.attribute_map)

    def __init__(self, sign_key=None, crds=None, crds_examples=None, data=None, *args, **kwargs):  # noqa: E501
        """HelmPackage - a model defined in Swagger"""  # noqa: E501
        self._sign_key = None
        self._crds = None
        self._crds_examples = None
        self._data = None
        self.discriminator = None
        if sign_key is not None:
            self.sign_key = sign_key
        if crds is not None:
            self.crds = crds
        if crds_examples is not None:
            self.crds_examples = crds_examples
        if data is not None:
            self.data = data
        Package.__init__(self, *args, **kwargs)

    @property
    def sign_key(self):
        """Gets the sign_key of this HelmPackage.  # noqa: E501


        :return: The sign_key of this HelmPackage.  # noqa: E501
        :rtype: HelmPackageSignKey
        """
        return self._sign_key

    @sign_key.setter
    def sign_key(self, sign_key):
        """Sets the sign_key of this HelmPackage.


        :param sign_key: The sign_key of this HelmPackage.  # noqa: E501
        :type: HelmPackageSignKey
        """

        self._sign_key = sign_key

    @property
    def crds(self):
        """Gets the crds of this HelmPackage.  # noqa: E501


        :return: The crds of this HelmPackage.  # noqa: E501
        :rtype: list[HelmPackageCrds]
        """
        return self._crds

    @crds.setter
    def crds(self, crds):
        """Sets the crds of this HelmPackage.


        :param crds: The crds of this HelmPackage.  # noqa: E501
        :type: list[HelmPackageCrds]
        """

        self._crds = crds

    @property
    def crds_examples(self):
        """Gets the crds_examples of this HelmPackage.  # noqa: E501


        :return: The crds_examples of this HelmPackage.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._crds_examples

    @crds_examples.setter
    def crds_examples(self, crds_examples):
        """Sets the crds_examples of this HelmPackage.


        :param crds_examples: The crds_examples of this HelmPackage.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._crds_examples = crds_examples

    @property
    def data(self):
        """Gets the data of this HelmPackage.  # noqa: E501


        :return: The data of this HelmPackage.  # noqa: E501
        :rtype: HelmPackageData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HelmPackage.


        :param data: The data of this HelmPackage.  # noqa: E501
        :type: HelmPackageData
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HelmPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HelmPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
