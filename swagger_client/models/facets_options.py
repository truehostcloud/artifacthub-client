# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FacetsOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'total': 'int',
        'filter_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'total': 'total',
        'filter_key': 'filter_key'
    }

    def __init__(self, id=None, name=None, total=None, filter_key=None):  # noqa: E501
        """FacetsOptions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._total = None
        self._filter_key = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.total = total
        if filter_key is not None:
            self.filter_key = filter_key

    @property
    def id(self):
        """Gets the id of this FacetsOptions.  # noqa: E501


        :return: The id of this FacetsOptions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FacetsOptions.


        :param id: The id of this FacetsOptions.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this FacetsOptions.  # noqa: E501


        :return: The name of this FacetsOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacetsOptions.


        :param name: The name of this FacetsOptions.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def total(self):
        """Gets the total of this FacetsOptions.  # noqa: E501


        :return: The total of this FacetsOptions.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FacetsOptions.


        :param total: The total of this FacetsOptions.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def filter_key(self):
        """Gets the filter_key of this FacetsOptions.  # noqa: E501


        :return: The filter_key of this FacetsOptions.  # noqa: E501
        :rtype: str
        """
        return self._filter_key

    @filter_key.setter
    def filter_key(self, filter_key):
        """Sets the filter_key of this FacetsOptions.


        :param filter_key: The filter_key of this FacetsOptions.  # noqa: E501
        :type: str
        """

        self._filter_key = filter_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacetsOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacetsOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
