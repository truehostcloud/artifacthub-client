# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'ts': 'int',
        'changes': 'list[PackagespackageIDchangelogChanges]',
        'contains_security_updates': 'bool',
        'prerelease': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'ts': 'ts',
        'changes': 'changes',
        'contains_security_updates': 'contains_security_updates',
        'prerelease': 'prerelease'
    }

    def __init__(self, version=None, ts=None, changes=None, contains_security_updates=None, prerelease=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._ts = None
        self._changes = None
        self._contains_security_updates = None
        self._prerelease = None
        self.discriminator = None
        self.version = version
        self.ts = ts
        if changes is not None:
            self.changes = changes
        self.contains_security_updates = contains_security_updates
        self.prerelease = prerelease

    @property
    def version(self):
        """Gets the version of this InlineResponse2003.  # noqa: E501


        :return: The version of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2003.


        :param version: The version of this InlineResponse2003.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def ts(self):
        """Gets the ts of this InlineResponse2003.  # noqa: E501


        :return: The ts of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this InlineResponse2003.


        :param ts: The ts of this InlineResponse2003.  # noqa: E501
        :type: int
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts

    @property
    def changes(self):
        """Gets the changes of this InlineResponse2003.  # noqa: E501


        :return: The changes of this InlineResponse2003.  # noqa: E501
        :rtype: list[PackagespackageIDchangelogChanges]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this InlineResponse2003.


        :param changes: The changes of this InlineResponse2003.  # noqa: E501
        :type: list[PackagespackageIDchangelogChanges]
        """

        self._changes = changes

    @property
    def contains_security_updates(self):
        """Gets the contains_security_updates of this InlineResponse2003.  # noqa: E501


        :return: The contains_security_updates of this InlineResponse2003.  # noqa: E501
        :rtype: bool
        """
        return self._contains_security_updates

    @contains_security_updates.setter
    def contains_security_updates(self, contains_security_updates):
        """Sets the contains_security_updates of this InlineResponse2003.


        :param contains_security_updates: The contains_security_updates of this InlineResponse2003.  # noqa: E501
        :type: bool
        """
        if contains_security_updates is None:
            raise ValueError("Invalid value for `contains_security_updates`, must not be `None`")  # noqa: E501

        self._contains_security_updates = contains_security_updates

    @property
    def prerelease(self):
        """Gets the prerelease of this InlineResponse2003.  # noqa: E501


        :return: The prerelease of this InlineResponse2003.  # noqa: E501
        :rtype: bool
        """
        return self._prerelease

    @prerelease.setter
    def prerelease(self, prerelease):
        """Sets the prerelease of this InlineResponse2003.


        :param prerelease: The prerelease of this InlineResponse2003.  # noqa: E501
        :type: bool
        """
        if prerelease is None:
            raise ValueError("Invalid value for `prerelease`, must not be `None`")  # noqa: E501

        self._prerelease = prerelease

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
