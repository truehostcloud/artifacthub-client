# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from artifacthub_client.api_client import ApiClient


class RepositoriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_organization_repository(self, body, org_name, **kwargs):  # noqa: E501
        """Add organization's repository  # noqa: E501

        Add organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_repository(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_organization_repository_with_http_info(body, org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_organization_repository_with_http_info(body, org_name, **kwargs)  # noqa: E501
            return data

    def add_organization_repository_with_http_info(self, body, org_name, **kwargs):  # noqa: E501
        """Add organization's repository  # noqa: E501

        Add organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_organization_repository_with_http_info(body, org_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str org_name: Organization name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_organization_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_organization_repository`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `add_organization_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/org/{orgName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_repository(self, body, **kwargs):  # noqa: E501
        """Add user's repository  # noqa: E501

        Add user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_user_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add user's repository  # noqa: E501

        Add user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def claim_repository_ownership(self, repo_name, **kwargs):  # noqa: E501
        """Claim the ownership of a given repository  # noqa: E501

        Claim the ownership of a given repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_repository_ownership(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.claim_repository_ownership_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.claim_repository_ownership_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def claim_repository_ownership_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Claim the ownership of a given repository  # noqa: E501

        Claim the ownership of a given repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_repository_ownership_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method claim_repository_ownership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `claim_repository_ownership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/user/{repoName}/claim-ownership', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def claim_repository_ownership_from_organization(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Claim the ownership of a given repository  # noqa: E501

        Claim the ownership of a given repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_repository_ownership_from_organization(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.claim_repository_ownership_from_organization_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.claim_repository_ownership_from_organization_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
            return data

    def claim_repository_ownership_from_organization_with_http_info(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Claim the ownership of a given repository  # noqa: E501

        Claim the ownership of a given repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.claim_repository_ownership_from_organization_with_http_info(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'repo_name', 'org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method claim_repository_ownership_from_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `claim_repository_ownership_from_organization`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `claim_repository_ownership_from_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/org/{orgName}/{repoName}/claim-ownership', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_repository(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Delete organization's repository  # noqa: E501

        Delete organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_repository(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organization_repository_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_repository_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_organization_repository_with_http_info(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Delete organization's repository  # noqa: E501

        Delete organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_repository_with_http_info(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'repo_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `delete_organization_repository`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_organization_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/org/{orgName}/{repoName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_repository(self, repo_name, **kwargs):  # noqa: E501
        """Delete user's repository  # noqa: E501

        Delete user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_repository(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_repository_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_repository_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def delete_user_repository_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Delete user's repository  # noqa: E501

        Delete user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_repository_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_user_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/user/{repoName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_repositories(self, **kwargs):  # noqa: E501
        """Search repositories that meet the provided criteria  # noqa: E501

        Search repositories that meet the provided criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_repositories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :param list[RepositoryKind] kind: Repository kind:   * `0` - Helm charts   * `1` - Falco rules   * `2` - OPA policies   * `3` - OLM operators   * `4` - Tinkerbell actions   * `5` - Krew kubectl plugins   * `6` - Helm plugins   * `7` - Tekton tasks   * `8` - KEDA scalers   * `9` - Core DNS plugins   * `10` - Keptn integrations   * `11` - Tekton pipelines   * `12` - Container images   * `13` - Kubewarden policies   * `14` - Gatekeeper policies   * `15` - Kyverno policies   * `16` - Knative client plugins   * `17` - Backstage plugins   * `18` - Argo templates   * `19` - KubeArmor templates
        :param list[str] user: List of aliases
        :param list[str] org: List of organization names
        :param str name: Repository name
        :param str url: Repository url
        :return: list[Repository]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_repositories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_repositories_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_repositories_with_http_info(self, **kwargs):  # noqa: E501
        """Search repositories that meet the provided criteria  # noqa: E501

        Search repositories that meet the provided criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_repositories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the result set
        :param int limit: The number of items to return
        :param list[RepositoryKind] kind: Repository kind:   * `0` - Helm charts   * `1` - Falco rules   * `2` - OPA policies   * `3` - OLM operators   * `4` - Tinkerbell actions   * `5` - Krew kubectl plugins   * `6` - Helm plugins   * `7` - Tekton tasks   * `8` - KEDA scalers   * `9` - Core DNS plugins   * `10` - Keptn integrations   * `11` - Tekton pipelines   * `12` - Container images   * `13` - Kubewarden policies   * `14` - Gatekeeper policies   * `15` - Kyverno policies   * `16` - Knative client plugins   * `17` - Backstage plugins   * `18` - Argo templates   * `19` - KubeArmor templates
        :param list[str] user: List of aliases
        :param list[str] org: List of organization names
        :param str name: Repository name
        :param str url: Repository url
        :return: list[Repository]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'kind', 'user', 'org', 'name', 'url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_repositories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
            collection_formats['kind'] = 'multi'  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
            collection_formats['user'] = 'multi'  # noqa: E501
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501
            collection_formats['org'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Repository]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_repository_ownership(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Transfer organization's repository to a different owner  # noqa: E501

        Transfer organization's repository to a different owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_repository_ownership(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_repository_ownership_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_repository_ownership_with_http_info(org_name, repo_name, **kwargs)  # noqa: E501
            return data

    def transfer_repository_ownership_with_http_info(self, org_name, repo_name, **kwargs):  # noqa: E501
        """Transfer organization's repository to a different owner  # noqa: E501

        Transfer organization's repository to a different owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_repository_ownership_with_http_info(org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'repo_name', 'org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_repository_ownership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `transfer_repository_ownership`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `transfer_repository_ownership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/org/{orgName}/{repoName}/transfer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_repository_ownership_to_organization(self, repo_name, **kwargs):  # noqa: E501
        """Transfer user's repository ownership to an organization  # noqa: E501

        Transfer user's repository ownership to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_repository_ownership_to_organization(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_repository_ownership_to_organization_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_repository_ownership_to_organization_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def transfer_repository_ownership_to_organization_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Transfer user's repository ownership to an organization  # noqa: E501

        Transfer user's repository ownership to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_repository_ownership_to_organization_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Repository name (required)
        :param str org: The org to transfer or from claiming the repository
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_repository_ownership_to_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `transfer_repository_ownership_to_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'org' in params:
            query_params.append(('org', params['org']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/user/{repoName}/transfer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_repository(self, body, org_name, repo_name, **kwargs):  # noqa: E501
        """Update organization's repository  # noqa: E501

        Update organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_repository(body, org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_organization_repository_with_http_info(body, org_name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_organization_repository_with_http_info(body, org_name, repo_name, **kwargs)  # noqa: E501
            return data

    def update_organization_repository_with_http_info(self, body, org_name, repo_name, **kwargs):  # noqa: E501
        """Update organization's repository  # noqa: E501

        Update organization's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_repository_with_http_info(body, org_name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str org_name: Organization name (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'org_name', 'repo_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_organization_repository`")  # noqa: E501
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `update_organization_repository`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `update_organization_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['orgName'] = params['org_name']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/org/{orgName}/{repoName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_repository(self, body, repo_name, **kwargs):  # noqa: E501
        """Update user's repository  # noqa: E501

        Update user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_repository(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_repository_with_http_info(body, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_repository_with_http_info(body, repo_name, **kwargs)  # noqa: E501
            return data

    def update_user_repository_with_http_info(self, body, repo_name, **kwargs):  # noqa: E501
        """Update user's repository  # noqa: E501

        Update user's repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_repository_with_http_info(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Repository request body (required)
        :param str repo_name: Repository name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repo_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_repository`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if ('repo_name' not in params or
                params['repo_name'] is None):
            raise ValueError("Missing the required parameter `repo_name` when calling `update_user_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyId', 'ApiKeySecret']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/user/{repoName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
