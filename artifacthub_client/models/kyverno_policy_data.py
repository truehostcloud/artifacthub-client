# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KyvernoPolicyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy': 'str',
        'kyvernosubject': 'str',
        'kyvernoversion': 'str',
        'kyvernokubernetes_version': 'str',
        'kyvernocategory': 'str'
    }

    attribute_map = {
        'policy': 'policy',
        'kyvernosubject': 'kyverno/subject',
        'kyvernoversion': 'kyverno/version',
        'kyvernokubernetes_version': 'kyverno/kubernetesVersion',
        'kyvernocategory': 'kyverno/category'
    }

    def __init__(self, policy=None, kyvernosubject=None, kyvernoversion=None, kyvernokubernetes_version=None, kyvernocategory=None):  # noqa: E501
        """KyvernoPolicyData - a model defined in Swagger"""  # noqa: E501
        self._policy = None
        self._kyvernosubject = None
        self._kyvernoversion = None
        self._kyvernokubernetes_version = None
        self._kyvernocategory = None
        self.discriminator = None
        if policy is not None:
            self.policy = policy
        if kyvernosubject is not None:
            self.kyvernosubject = kyvernosubject
        if kyvernoversion is not None:
            self.kyvernoversion = kyvernoversion
        if kyvernokubernetes_version is not None:
            self.kyvernokubernetes_version = kyvernokubernetes_version
        if kyvernocategory is not None:
            self.kyvernocategory = kyvernocategory

    @property
    def policy(self):
        """Gets the policy of this KyvernoPolicyData.  # noqa: E501


        :return: The policy of this KyvernoPolicyData.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this KyvernoPolicyData.


        :param policy: The policy of this KyvernoPolicyData.  # noqa: E501
        :type: str
        """

        self._policy = policy

    @property
    def kyvernosubject(self):
        """Gets the kyvernosubject of this KyvernoPolicyData.  # noqa: E501


        :return: The kyvernosubject of this KyvernoPolicyData.  # noqa: E501
        :rtype: str
        """
        return self._kyvernosubject

    @kyvernosubject.setter
    def kyvernosubject(self, kyvernosubject):
        """Sets the kyvernosubject of this KyvernoPolicyData.


        :param kyvernosubject: The kyvernosubject of this KyvernoPolicyData.  # noqa: E501
        :type: str
        """

        self._kyvernosubject = kyvernosubject

    @property
    def kyvernoversion(self):
        """Gets the kyvernoversion of this KyvernoPolicyData.  # noqa: E501


        :return: The kyvernoversion of this KyvernoPolicyData.  # noqa: E501
        :rtype: str
        """
        return self._kyvernoversion

    @kyvernoversion.setter
    def kyvernoversion(self, kyvernoversion):
        """Sets the kyvernoversion of this KyvernoPolicyData.


        :param kyvernoversion: The kyvernoversion of this KyvernoPolicyData.  # noqa: E501
        :type: str
        """

        self._kyvernoversion = kyvernoversion

    @property
    def kyvernokubernetes_version(self):
        """Gets the kyvernokubernetes_version of this KyvernoPolicyData.  # noqa: E501


        :return: The kyvernokubernetes_version of this KyvernoPolicyData.  # noqa: E501
        :rtype: str
        """
        return self._kyvernokubernetes_version

    @kyvernokubernetes_version.setter
    def kyvernokubernetes_version(self, kyvernokubernetes_version):
        """Sets the kyvernokubernetes_version of this KyvernoPolicyData.


        :param kyvernokubernetes_version: The kyvernokubernetes_version of this KyvernoPolicyData.  # noqa: E501
        :type: str
        """

        self._kyvernokubernetes_version = kyvernokubernetes_version

    @property
    def kyvernocategory(self):
        """Gets the kyvernocategory of this KyvernoPolicyData.  # noqa: E501


        :return: The kyvernocategory of this KyvernoPolicyData.  # noqa: E501
        :rtype: str
        """
        return self._kyvernocategory

    @kyvernocategory.setter
    def kyvernocategory(self, kyvernocategory):
        """Sets the kyvernocategory of this KyvernoPolicyData.


        :param kyvernocategory: The kyvernocategory of this KyvernoPolicyData.  # noqa: E501
        :type: str
        """

        self._kyvernocategory = kyvernocategory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KyvernoPolicyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KyvernoPolicyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
