# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'content_type': 'str',
        'template': 'str',
        'event_kinds': 'list[EventKindId]'
    }

    attribute_map = {
        'url': 'url',
        'content_type': 'content_type',
        'template': 'template',
        'event_kinds': 'event_kinds'
    }

    def __init__(self, url=None, content_type=None, template=None, event_kinds=None):  # noqa: E501
        """WebhookTest - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._content_type = None
        self._template = None
        self._event_kinds = None
        self.discriminator = None
        self.url = url
        if content_type is not None:
            self.content_type = content_type
        if template is not None:
            self.template = template
        self.event_kinds = event_kinds

    @property
    def url(self):
        """Gets the url of this WebhookTest.  # noqa: E501


        :return: The url of this WebhookTest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookTest.


        :param url: The url of this WebhookTest.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def content_type(self):
        """Gets the content_type of this WebhookTest.  # noqa: E501


        :return: The content_type of this WebhookTest.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this WebhookTest.


        :param content_type: The content_type of this WebhookTest.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def template(self):
        """Gets the template of this WebhookTest.  # noqa: E501


        :return: The template of this WebhookTest.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this WebhookTest.


        :param template: The template of this WebhookTest.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def event_kinds(self):
        """Gets the event_kinds of this WebhookTest.  # noqa: E501


        :return: The event_kinds of this WebhookTest.  # noqa: E501
        :rtype: list[EventKindId]
        """
        return self._event_kinds

    @event_kinds.setter
    def event_kinds(self, event_kinds):
        """Sets the event_kinds of this WebhookTest.


        :param event_kinds: The event_kinds of this WebhookTest.  # noqa: E501
        :type: list[EventKindId]
        """
        if event_kinds is None:
            raise ValueError("Invalid value for `event_kinds`, must not be `None`")  # noqa: E501

        self._event_kinds = event_kinds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
