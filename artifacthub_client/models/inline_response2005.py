# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_id': 'str',
        'name': 'str',
        'normalized_name': 'str',
        'logo_image_id': 'str',
        'repository': 'RepositorySummary',
        'event_kinds': 'list[EventKindId]'
    }

    attribute_map = {
        'package_id': 'package_id',
        'name': 'name',
        'normalized_name': 'normalized_name',
        'logo_image_id': 'logo_image_id',
        'repository': 'repository',
        'event_kinds': 'event_kinds'
    }

    def __init__(self, package_id=None, name=None, normalized_name=None, logo_image_id=None, repository=None, event_kinds=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._package_id = None
        self._name = None
        self._normalized_name = None
        self._logo_image_id = None
        self._repository = None
        self._event_kinds = None
        self.discriminator = None
        self.package_id = package_id
        self.name = name
        self.normalized_name = normalized_name
        if logo_image_id is not None:
            self.logo_image_id = logo_image_id
        self.repository = repository
        self.event_kinds = event_kinds

    @property
    def package_id(self):
        """Gets the package_id of this InlineResponse2005.  # noqa: E501


        :return: The package_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this InlineResponse2005.


        :param package_id: The package_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")  # noqa: E501

        self._package_id = package_id

    @property
    def name(self):
        """Gets the name of this InlineResponse2005.  # noqa: E501


        :return: The name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2005.


        :param name: The name of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def normalized_name(self):
        """Gets the normalized_name of this InlineResponse2005.  # noqa: E501


        :return: The normalized_name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._normalized_name

    @normalized_name.setter
    def normalized_name(self, normalized_name):
        """Sets the normalized_name of this InlineResponse2005.


        :param normalized_name: The normalized_name of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if normalized_name is None:
            raise ValueError("Invalid value for `normalized_name`, must not be `None`")  # noqa: E501

        self._normalized_name = normalized_name

    @property
    def logo_image_id(self):
        """Gets the logo_image_id of this InlineResponse2005.  # noqa: E501


        :return: The logo_image_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._logo_image_id

    @logo_image_id.setter
    def logo_image_id(self, logo_image_id):
        """Sets the logo_image_id of this InlineResponse2005.


        :param logo_image_id: The logo_image_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._logo_image_id = logo_image_id

    @property
    def repository(self):
        """Gets the repository of this InlineResponse2005.  # noqa: E501


        :return: The repository of this InlineResponse2005.  # noqa: E501
        :rtype: RepositorySummary
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this InlineResponse2005.


        :param repository: The repository of this InlineResponse2005.  # noqa: E501
        :type: RepositorySummary
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def event_kinds(self):
        """Gets the event_kinds of this InlineResponse2005.  # noqa: E501


        :return: The event_kinds of this InlineResponse2005.  # noqa: E501
        :rtype: list[EventKindId]
        """
        return self._event_kinds

    @event_kinds.setter
    def event_kinds(self, event_kinds):
        """Sets the event_kinds of this InlineResponse2005.


        :param event_kinds: The event_kinds of this InlineResponse2005.  # noqa: E501
        :type: list[EventKindId]
        """
        if event_kinds is None:
            raise ValueError("Invalid value for `event_kinds`, must not be `None`")  # noqa: E501

        self._event_kinds = event_kinds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
