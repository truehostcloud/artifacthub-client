# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'home_url': 'str',
        'logo_image_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'description': 'description',
        'home_url': 'home_url',
        'logo_image_id': 'logo_image_id'
    }

    def __init__(self, name=None, display_name=None, description=None, home_url=None, logo_image_id=None):  # noqa: E501
        """OrganizationSummary - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._display_name = None
        self._description = None
        self._home_url = None
        self._logo_image_id = None
        self.discriminator = None
        self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if home_url is not None:
            self.home_url = home_url
        if logo_image_id is not None:
            self.logo_image_id = logo_image_id

    @property
    def name(self):
        """Gets the name of this OrganizationSummary.  # noqa: E501


        :return: The name of this OrganizationSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationSummary.


        :param name: The name of this OrganizationSummary.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this OrganizationSummary.  # noqa: E501


        :return: The display_name of this OrganizationSummary.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrganizationSummary.


        :param display_name: The display_name of this OrganizationSummary.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this OrganizationSummary.  # noqa: E501


        :return: The description of this OrganizationSummary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationSummary.


        :param description: The description of this OrganizationSummary.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def home_url(self):
        """Gets the home_url of this OrganizationSummary.  # noqa: E501


        :return: The home_url of this OrganizationSummary.  # noqa: E501
        :rtype: str
        """
        return self._home_url

    @home_url.setter
    def home_url(self, home_url):
        """Sets the home_url of this OrganizationSummary.


        :param home_url: The home_url of this OrganizationSummary.  # noqa: E501
        :type: str
        """

        self._home_url = home_url

    @property
    def logo_image_id(self):
        """Gets the logo_image_id of this OrganizationSummary.  # noqa: E501


        :return: The logo_image_id of this OrganizationSummary.  # noqa: E501
        :rtype: str
        """
        return self._logo_image_id

    @logo_image_id.setter
    def logo_image_id(self, logo_image_id):
        """Sets the logo_image_id of this OrganizationSummary.


        :param logo_image_id: The logo_image_id of this OrganizationSummary.  # noqa: E501
        :type: str
        """

        self._logo_image_id = logo_image_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
