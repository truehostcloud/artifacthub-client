# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorizationPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_enabled': 'bool',
        'predefined_policy': 'str',
        'custom_policy': 'str',
        'policy_data': 'dict(str, object)'
    }

    attribute_map = {
        'authorization_enabled': 'authorization_enabled',
        'predefined_policy': 'predefined_policy',
        'custom_policy': 'custom_policy',
        'policy_data': 'policy_data'
    }

    def __init__(self, authorization_enabled=None, predefined_policy=None, custom_policy=None, policy_data=None):  # noqa: E501
        """AuthorizationPolicy - a model defined in Swagger"""  # noqa: E501
        self._authorization_enabled = None
        self._predefined_policy = None
        self._custom_policy = None
        self._policy_data = None
        self.discriminator = None
        self.authorization_enabled = authorization_enabled
        if predefined_policy is not None:
            self.predefined_policy = predefined_policy
        if custom_policy is not None:
            self.custom_policy = custom_policy
        if policy_data is not None:
            self.policy_data = policy_data

    @property
    def authorization_enabled(self):
        """Gets the authorization_enabled of this AuthorizationPolicy.  # noqa: E501


        :return: The authorization_enabled of this AuthorizationPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._authorization_enabled

    @authorization_enabled.setter
    def authorization_enabled(self, authorization_enabled):
        """Sets the authorization_enabled of this AuthorizationPolicy.


        :param authorization_enabled: The authorization_enabled of this AuthorizationPolicy.  # noqa: E501
        :type: bool
        """
        if authorization_enabled is None:
            raise ValueError("Invalid value for `authorization_enabled`, must not be `None`")  # noqa: E501

        self._authorization_enabled = authorization_enabled

    @property
    def predefined_policy(self):
        """Gets the predefined_policy of this AuthorizationPolicy.  # noqa: E501


        :return: The predefined_policy of this AuthorizationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._predefined_policy

    @predefined_policy.setter
    def predefined_policy(self, predefined_policy):
        """Sets the predefined_policy of this AuthorizationPolicy.


        :param predefined_policy: The predefined_policy of this AuthorizationPolicy.  # noqa: E501
        :type: str
        """

        self._predefined_policy = predefined_policy

    @property
    def custom_policy(self):
        """Gets the custom_policy of this AuthorizationPolicy.  # noqa: E501


        :return: The custom_policy of this AuthorizationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._custom_policy

    @custom_policy.setter
    def custom_policy(self, custom_policy):
        """Sets the custom_policy of this AuthorizationPolicy.


        :param custom_policy: The custom_policy of this AuthorizationPolicy.  # noqa: E501
        :type: str
        """

        self._custom_policy = custom_policy

    @property
    def policy_data(self):
        """Gets the policy_data of this AuthorizationPolicy.  # noqa: E501


        :return: The policy_data of this AuthorizationPolicy.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._policy_data

    @policy_data.setter
    def policy_data(self, policy_data):
        """Sets the policy_data of this AuthorizationPolicy.


        :param policy_data: The policy_data of this AuthorizationPolicy.  # noqa: E501
        :type: dict(str, object)
        """

        self._policy_data = policy_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
