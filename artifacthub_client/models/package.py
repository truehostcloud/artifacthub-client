# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.package_base import PackageBase  # noqa: F401,E501

class Package(PackageBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repository': 'RepositorySummary',
        'is_operator': 'bool',
        'latest_version': 'str',
        'logo_url': 'str',
        'category': 'PackageCategoryId',
        'keywords': 'list[str]',
        'home_url': 'str',
        'readme': 'str',
        'links': 'list[Link]',
        'available_versions': 'list[PackageAvailableVersions]',
        'maintainers': 'list[Maintainer]',
        'default_channel': 'str',
        'channels': 'list[PackageChannels]',
        'provider': 'str',
        'containers_images': 'PackageContainersImages',
        'ts': 'int',
        'capabilities': 'str',
        'security_report_created_at': 'int',
        'has_values_schema': 'bool',
        'has_changelog': 'bool',
        'content_url': 'str',
        'contains_security_updates': 'bool',
        'prerelease': 'bool',
        'recommendations': 'list[PackageRecommendations]',
        'stats': 'PackageStats'
    }
    if hasattr(PackageBase, "swagger_types"):
        swagger_types.update(PackageBase.swagger_types)

    attribute_map = {
        'repository': 'repository',
        'is_operator': 'is_operator',
        'latest_version': 'latest_version',
        'logo_url': 'logo_url',
        'category': 'category',
        'keywords': 'keywords',
        'home_url': 'home_url',
        'readme': 'readme',
        'links': 'links',
        'available_versions': 'available_versions',
        'maintainers': 'maintainers',
        'default_channel': 'default_channel',
        'channels': 'channels',
        'provider': 'provider',
        'containers_images': 'containers_images',
        'ts': 'ts',
        'capabilities': 'capabilities',
        'security_report_created_at': 'security_report_created_at',
        'has_values_schema': 'has_values_schema',
        'has_changelog': 'has_changelog',
        'content_url': 'content_url',
        'contains_security_updates': 'contains_security_updates',
        'prerelease': 'prerelease',
        'recommendations': 'recommendations',
        'stats': 'stats'
    }
    if hasattr(PackageBase, "attribute_map"):
        attribute_map.update(PackageBase.attribute_map)

    def __init__(self, repository=None, is_operator=None, latest_version=None, logo_url=None, category=None, keywords=None, home_url=None, readme=None, links=None, available_versions=None, maintainers=None, default_channel=None, channels=None, provider=None, containers_images=None, ts=None, capabilities=None, security_report_created_at=None, has_values_schema=None, has_changelog=None, content_url=None, contains_security_updates=None, prerelease=None, recommendations=None, stats=None, *args, **kwargs):  # noqa: E501
        """Package - a model defined in Swagger"""  # noqa: E501
        self._repository = None
        self._is_operator = None
        self._latest_version = None
        self._logo_url = None
        self._category = None
        self._keywords = None
        self._home_url = None
        self._readme = None
        self._links = None
        self._available_versions = None
        self._maintainers = None
        self._default_channel = None
        self._channels = None
        self._provider = None
        self._containers_images = None
        self._ts = None
        self._capabilities = None
        self._security_report_created_at = None
        self._has_values_schema = None
        self._has_changelog = None
        self._content_url = None
        self._contains_security_updates = None
        self._prerelease = None
        self._recommendations = None
        self._stats = None
        self.discriminator = None
        self.repository = repository
        if is_operator is not None:
            self.is_operator = is_operator
        self.latest_version = latest_version
        if logo_url is not None:
            self.logo_url = logo_url
        if category is not None:
            self.category = category
        if keywords is not None:
            self.keywords = keywords
        if home_url is not None:
            self.home_url = home_url
        if readme is not None:
            self.readme = readme
        if links is not None:
            self.links = links
        self.available_versions = available_versions
        if maintainers is not None:
            self.maintainers = maintainers
        if default_channel is not None:
            self.default_channel = default_channel
        if channels is not None:
            self.channels = channels
        if provider is not None:
            self.provider = provider
        if containers_images is not None:
            self.containers_images = containers_images
        self.ts = ts
        if capabilities is not None:
            self.capabilities = capabilities
        if security_report_created_at is not None:
            self.security_report_created_at = security_report_created_at
        self.has_values_schema = has_values_schema
        self.has_changelog = has_changelog
        if content_url is not None:
            self.content_url = content_url
        self.contains_security_updates = contains_security_updates
        self.prerelease = prerelease
        if recommendations is not None:
            self.recommendations = recommendations
        if stats is not None:
            self.stats = stats
        PackageBase.__init__(self, *args, **kwargs)

    @property
    def repository(self):
        """Gets the repository of this Package.  # noqa: E501


        :return: The repository of this Package.  # noqa: E501
        :rtype: RepositorySummary
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Package.


        :param repository: The repository of this Package.  # noqa: E501
        :type: RepositorySummary
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def is_operator(self):
        """Gets the is_operator of this Package.  # noqa: E501


        :return: The is_operator of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._is_operator

    @is_operator.setter
    def is_operator(self, is_operator):
        """Sets the is_operator of this Package.


        :param is_operator: The is_operator of this Package.  # noqa: E501
        :type: bool
        """

        self._is_operator = is_operator

    @property
    def latest_version(self):
        """Gets the latest_version of this Package.  # noqa: E501


        :return: The latest_version of this Package.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this Package.


        :param latest_version: The latest_version of this Package.  # noqa: E501
        :type: str
        """
        if latest_version is None:
            raise ValueError("Invalid value for `latest_version`, must not be `None`")  # noqa: E501

        self._latest_version = latest_version

    @property
    def logo_url(self):
        """Gets the logo_url of this Package.  # noqa: E501


        :return: The logo_url of this Package.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Package.


        :param logo_url: The logo_url of this Package.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def category(self):
        """Gets the category of this Package.  # noqa: E501


        :return: The category of this Package.  # noqa: E501
        :rtype: PackageCategoryId
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Package.


        :param category: The category of this Package.  # noqa: E501
        :type: PackageCategoryId
        """

        self._category = category

    @property
    def keywords(self):
        """Gets the keywords of this Package.  # noqa: E501


        :return: The keywords of this Package.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Package.


        :param keywords: The keywords of this Package.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def home_url(self):
        """Gets the home_url of this Package.  # noqa: E501


        :return: The home_url of this Package.  # noqa: E501
        :rtype: str
        """
        return self._home_url

    @home_url.setter
    def home_url(self, home_url):
        """Sets the home_url of this Package.


        :param home_url: The home_url of this Package.  # noqa: E501
        :type: str
        """

        self._home_url = home_url

    @property
    def readme(self):
        """Gets the readme of this Package.  # noqa: E501


        :return: The readme of this Package.  # noqa: E501
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this Package.


        :param readme: The readme of this Package.  # noqa: E501
        :type: str
        """

        self._readme = readme

    @property
    def links(self):
        """Gets the links of this Package.  # noqa: E501


        :return: The links of this Package.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Package.


        :param links: The links of this Package.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def available_versions(self):
        """Gets the available_versions of this Package.  # noqa: E501


        :return: The available_versions of this Package.  # noqa: E501
        :rtype: list[PackageAvailableVersions]
        """
        return self._available_versions

    @available_versions.setter
    def available_versions(self, available_versions):
        """Sets the available_versions of this Package.


        :param available_versions: The available_versions of this Package.  # noqa: E501
        :type: list[PackageAvailableVersions]
        """
        if available_versions is None:
            raise ValueError("Invalid value for `available_versions`, must not be `None`")  # noqa: E501

        self._available_versions = available_versions

    @property
    def maintainers(self):
        """Gets the maintainers of this Package.  # noqa: E501


        :return: The maintainers of this Package.  # noqa: E501
        :rtype: list[Maintainer]
        """
        return self._maintainers

    @maintainers.setter
    def maintainers(self, maintainers):
        """Sets the maintainers of this Package.


        :param maintainers: The maintainers of this Package.  # noqa: E501
        :type: list[Maintainer]
        """

        self._maintainers = maintainers

    @property
    def default_channel(self):
        """Gets the default_channel of this Package.  # noqa: E501


        :return: The default_channel of this Package.  # noqa: E501
        :rtype: str
        """
        return self._default_channel

    @default_channel.setter
    def default_channel(self, default_channel):
        """Sets the default_channel of this Package.


        :param default_channel: The default_channel of this Package.  # noqa: E501
        :type: str
        """

        self._default_channel = default_channel

    @property
    def channels(self):
        """Gets the channels of this Package.  # noqa: E501


        :return: The channels of this Package.  # noqa: E501
        :rtype: list[PackageChannels]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Package.


        :param channels: The channels of this Package.  # noqa: E501
        :type: list[PackageChannels]
        """

        self._channels = channels

    @property
    def provider(self):
        """Gets the provider of this Package.  # noqa: E501


        :return: The provider of this Package.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Package.


        :param provider: The provider of this Package.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def containers_images(self):
        """Gets the containers_images of this Package.  # noqa: E501


        :return: The containers_images of this Package.  # noqa: E501
        :rtype: PackageContainersImages
        """
        return self._containers_images

    @containers_images.setter
    def containers_images(self, containers_images):
        """Sets the containers_images of this Package.


        :param containers_images: The containers_images of this Package.  # noqa: E501
        :type: PackageContainersImages
        """

        self._containers_images = containers_images

    @property
    def ts(self):
        """Gets the ts of this Package.  # noqa: E501


        :return: The ts of this Package.  # noqa: E501
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this Package.


        :param ts: The ts of this Package.  # noqa: E501
        :type: int
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts

    @property
    def capabilities(self):
        """Gets the capabilities of this Package.  # noqa: E501


        :return: The capabilities of this Package.  # noqa: E501
        :rtype: str
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Package.


        :param capabilities: The capabilities of this Package.  # noqa: E501
        :type: str
        """

        self._capabilities = capabilities

    @property
    def security_report_created_at(self):
        """Gets the security_report_created_at of this Package.  # noqa: E501


        :return: The security_report_created_at of this Package.  # noqa: E501
        :rtype: int
        """
        return self._security_report_created_at

    @security_report_created_at.setter
    def security_report_created_at(self, security_report_created_at):
        """Sets the security_report_created_at of this Package.


        :param security_report_created_at: The security_report_created_at of this Package.  # noqa: E501
        :type: int
        """

        self._security_report_created_at = security_report_created_at

    @property
    def has_values_schema(self):
        """Gets the has_values_schema of this Package.  # noqa: E501


        :return: The has_values_schema of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._has_values_schema

    @has_values_schema.setter
    def has_values_schema(self, has_values_schema):
        """Sets the has_values_schema of this Package.


        :param has_values_schema: The has_values_schema of this Package.  # noqa: E501
        :type: bool
        """
        if has_values_schema is None:
            raise ValueError("Invalid value for `has_values_schema`, must not be `None`")  # noqa: E501

        self._has_values_schema = has_values_schema

    @property
    def has_changelog(self):
        """Gets the has_changelog of this Package.  # noqa: E501


        :return: The has_changelog of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._has_changelog

    @has_changelog.setter
    def has_changelog(self, has_changelog):
        """Sets the has_changelog of this Package.


        :param has_changelog: The has_changelog of this Package.  # noqa: E501
        :type: bool
        """
        if has_changelog is None:
            raise ValueError("Invalid value for `has_changelog`, must not be `None`")  # noqa: E501

        self._has_changelog = has_changelog

    @property
    def content_url(self):
        """Gets the content_url of this Package.  # noqa: E501


        :return: The content_url of this Package.  # noqa: E501
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this Package.


        :param content_url: The content_url of this Package.  # noqa: E501
        :type: str
        """

        self._content_url = content_url

    @property
    def contains_security_updates(self):
        """Gets the contains_security_updates of this Package.  # noqa: E501


        :return: The contains_security_updates of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._contains_security_updates

    @contains_security_updates.setter
    def contains_security_updates(self, contains_security_updates):
        """Sets the contains_security_updates of this Package.


        :param contains_security_updates: The contains_security_updates of this Package.  # noqa: E501
        :type: bool
        """
        if contains_security_updates is None:
            raise ValueError("Invalid value for `contains_security_updates`, must not be `None`")  # noqa: E501

        self._contains_security_updates = contains_security_updates

    @property
    def prerelease(self):
        """Gets the prerelease of this Package.  # noqa: E501


        :return: The prerelease of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._prerelease

    @prerelease.setter
    def prerelease(self, prerelease):
        """Sets the prerelease of this Package.


        :param prerelease: The prerelease of this Package.  # noqa: E501
        :type: bool
        """
        if prerelease is None:
            raise ValueError("Invalid value for `prerelease`, must not be `None`")  # noqa: E501

        self._prerelease = prerelease

    @property
    def recommendations(self):
        """Gets the recommendations of this Package.  # noqa: E501


        :return: The recommendations of this Package.  # noqa: E501
        :rtype: list[PackageRecommendations]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this Package.


        :param recommendations: The recommendations of this Package.  # noqa: E501
        :type: list[PackageRecommendations]
        """

        self._recommendations = recommendations

    @property
    def stats(self):
        """Gets the stats of this Package.  # noqa: E501


        :return: The stats of this Package.  # noqa: E501
        :rtype: PackageStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Package.


        :param stats: The stats of this Package.  # noqa: E501
        :type: PackageStats
        """

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Package, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
