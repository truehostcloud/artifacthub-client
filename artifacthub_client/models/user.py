# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'profile_image_id': 'str',
        'password_set': 'bool',
        'tfa_enabled': 'bool'
    }

    attribute_map = {
        'alias': 'alias',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'profile_image_id': 'profile_image_id',
        'password_set': 'password_set',
        'tfa_enabled': 'tfa_enabled'
    }

    def __init__(self, alias=None, first_name=None, last_name=None, email=None, profile_image_id=None, password_set=None, tfa_enabled=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._profile_image_id = None
        self._password_set = None
        self._tfa_enabled = None
        self.discriminator = None
        self.alias = alias
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.email = email
        if profile_image_id is not None:
            self.profile_image_id = profile_image_id
        self.password_set = password_set
        if tfa_enabled is not None:
            self.tfa_enabled = tfa_enabled

    @property
    def alias(self):
        """Gets the alias of this User.  # noqa: E501


        :return: The alias of this User.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this User.


        :param alias: The alias of this User.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def profile_image_id(self):
        """Gets the profile_image_id of this User.  # noqa: E501


        :return: The profile_image_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_id

    @profile_image_id.setter
    def profile_image_id(self, profile_image_id):
        """Sets the profile_image_id of this User.


        :param profile_image_id: The profile_image_id of this User.  # noqa: E501
        :type: str
        """

        self._profile_image_id = profile_image_id

    @property
    def password_set(self):
        """Gets the password_set of this User.  # noqa: E501


        :return: The password_set of this User.  # noqa: E501
        :rtype: bool
        """
        return self._password_set

    @password_set.setter
    def password_set(self, password_set):
        """Sets the password_set of this User.


        :param password_set: The password_set of this User.  # noqa: E501
        :type: bool
        """
        if password_set is None:
            raise ValueError("Invalid value for `password_set`, must not be `None`")  # noqa: E501

        self._password_set = password_set

    @property
    def tfa_enabled(self):
        """Gets the tfa_enabled of this User.  # noqa: E501


        :return: The tfa_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._tfa_enabled

    @tfa_enabled.setter
    def tfa_enabled(self, tfa_enabled):
        """Sets the tfa_enabled of this User.


        :param tfa_enabled: The tfa_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._tfa_enabled = tfa_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
