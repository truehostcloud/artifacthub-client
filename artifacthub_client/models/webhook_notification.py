# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_id': 'str',
        'created_at': 'int',
        'processed': 'bool',
        'processed_at': 'int',
        'error': 'str'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'created_at': 'created_at',
        'processed': 'processed',
        'processed_at': 'processed_at',
        'error': 'error'
    }

    def __init__(self, notification_id=None, created_at=None, processed=None, processed_at=None, error=None):  # noqa: E501
        """WebhookNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_id = None
        self._created_at = None
        self._processed = None
        self._processed_at = None
        self._error = None
        self.discriminator = None
        self.notification_id = notification_id
        self.created_at = created_at
        self.processed = processed
        self.processed_at = processed_at
        if error is not None:
            self.error = error

    @property
    def notification_id(self):
        """Gets the notification_id of this WebhookNotification.  # noqa: E501


        :return: The notification_id of this WebhookNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this WebhookNotification.


        :param notification_id: The notification_id of this WebhookNotification.  # noqa: E501
        :type: str
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def created_at(self):
        """Gets the created_at of this WebhookNotification.  # noqa: E501


        :return: The created_at of this WebhookNotification.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookNotification.


        :param created_at: The created_at of this WebhookNotification.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def processed(self):
        """Gets the processed of this WebhookNotification.  # noqa: E501


        :return: The processed of this WebhookNotification.  # noqa: E501
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this WebhookNotification.


        :param processed: The processed of this WebhookNotification.  # noqa: E501
        :type: bool
        """
        if processed is None:
            raise ValueError("Invalid value for `processed`, must not be `None`")  # noqa: E501

        self._processed = processed

    @property
    def processed_at(self):
        """Gets the processed_at of this WebhookNotification.  # noqa: E501


        :return: The processed_at of this WebhookNotification.  # noqa: E501
        :rtype: int
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this WebhookNotification.


        :param processed_at: The processed_at of this WebhookNotification.  # noqa: E501
        :type: int
        """
        if processed_at is None:
            raise ValueError("Invalid value for `processed_at`, must not be `None`")  # noqa: E501

        self._processed_at = processed_at

    @property
    def error(self):
        """Gets the error of this WebhookNotification.  # noqa: E501


        :return: The error of this WebhookNotification.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this WebhookNotification.


        :param error: The error of this WebhookNotification.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
