# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from artifacthub_client.models.webhook_summary import WebhookSummary  # noqa: F401,E501

class Webhook(WebhookSummary):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'webhook_id': 'str',
        'packages': 'list[PackageSummary]',
        'last_notifications': 'list[WebhookNotification]'
    }
    if hasattr(WebhookSummary, "swagger_types"):
        swagger_types.update(WebhookSummary.swagger_types)

    attribute_map = {
        'webhook_id': 'webhook_id',
        'packages': 'packages',
        'last_notifications': 'last_notifications'
    }
    if hasattr(WebhookSummary, "attribute_map"):
        attribute_map.update(WebhookSummary.attribute_map)

    def __init__(self, webhook_id=None, packages=None, last_notifications=None, *args, **kwargs):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501
        self._webhook_id = None
        self._packages = None
        self._last_notifications = None
        self.discriminator = None
        self.webhook_id = webhook_id
        self.packages = packages
        self.last_notifications = last_notifications
        WebhookSummary.__init__(self, *args, **kwargs)

    @property
    def webhook_id(self):
        """Gets the webhook_id of this Webhook.  # noqa: E501


        :return: The webhook_id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this Webhook.


        :param webhook_id: The webhook_id of this Webhook.  # noqa: E501
        :type: str
        """
        if webhook_id is None:
            raise ValueError("Invalid value for `webhook_id`, must not be `None`")  # noqa: E501

        self._webhook_id = webhook_id

    @property
    def packages(self):
        """Gets the packages of this Webhook.  # noqa: E501


        :return: The packages of this Webhook.  # noqa: E501
        :rtype: list[PackageSummary]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this Webhook.


        :param packages: The packages of this Webhook.  # noqa: E501
        :type: list[PackageSummary]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages

    @property
    def last_notifications(self):
        """Gets the last_notifications of this Webhook.  # noqa: E501


        :return: The last_notifications of this Webhook.  # noqa: E501
        :rtype: list[WebhookNotification]
        """
        return self._last_notifications

    @last_notifications.setter
    def last_notifications(self, last_notifications):
        """Sets the last_notifications of this Webhook.


        :param last_notifications: The last_notifications of this Webhook.  # noqa: E501
        :type: list[WebhookNotification]
        """
        if last_notifications is None:
            raise ValueError("Invalid value for `last_notifications`, must not be `None`")  # noqa: E501

        self._last_notifications = last_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
