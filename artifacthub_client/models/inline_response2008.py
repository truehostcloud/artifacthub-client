# coding: utf-8

"""
    Artifact Hub

    Find, install and publish Kubernetes packages  # noqa: E501

    OpenAPI spec version: 1.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generated_at': 'int',
        'packages': 'InlineResponse2008Packages',
        'repositories': 'InlineResponse2008Repositories',
        'snapshots': 'InlineResponse2008Repositories',
        'organizations': 'InlineResponse2008Organizations',
        'users': 'InlineResponse2008Organizations'
    }

    attribute_map = {
        'generated_at': 'generated_at',
        'packages': 'packages',
        'repositories': 'repositories',
        'snapshots': 'snapshots',
        'organizations': 'organizations',
        'users': 'users'
    }

    def __init__(self, generated_at=None, packages=None, repositories=None, snapshots=None, organizations=None, users=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501
        self._generated_at = None
        self._packages = None
        self._repositories = None
        self._snapshots = None
        self._organizations = None
        self._users = None
        self.discriminator = None
        self.generated_at = generated_at
        self.packages = packages
        self.repositories = repositories
        self.snapshots = snapshots
        self.organizations = organizations
        self.users = users

    @property
    def generated_at(self):
        """Gets the generated_at of this InlineResponse2008.  # noqa: E501


        :return: The generated_at of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._generated_at

    @generated_at.setter
    def generated_at(self, generated_at):
        """Sets the generated_at of this InlineResponse2008.


        :param generated_at: The generated_at of this InlineResponse2008.  # noqa: E501
        :type: int
        """
        if generated_at is None:
            raise ValueError("Invalid value for `generated_at`, must not be `None`")  # noqa: E501

        self._generated_at = generated_at

    @property
    def packages(self):
        """Gets the packages of this InlineResponse2008.  # noqa: E501


        :return: The packages of this InlineResponse2008.  # noqa: E501
        :rtype: InlineResponse2008Packages
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this InlineResponse2008.


        :param packages: The packages of this InlineResponse2008.  # noqa: E501
        :type: InlineResponse2008Packages
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages

    @property
    def repositories(self):
        """Gets the repositories of this InlineResponse2008.  # noqa: E501


        :return: The repositories of this InlineResponse2008.  # noqa: E501
        :rtype: InlineResponse2008Repositories
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this InlineResponse2008.


        :param repositories: The repositories of this InlineResponse2008.  # noqa: E501
        :type: InlineResponse2008Repositories
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")  # noqa: E501

        self._repositories = repositories

    @property
    def snapshots(self):
        """Gets the snapshots of this InlineResponse2008.  # noqa: E501


        :return: The snapshots of this InlineResponse2008.  # noqa: E501
        :rtype: InlineResponse2008Repositories
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this InlineResponse2008.


        :param snapshots: The snapshots of this InlineResponse2008.  # noqa: E501
        :type: InlineResponse2008Repositories
        """
        if snapshots is None:
            raise ValueError("Invalid value for `snapshots`, must not be `None`")  # noqa: E501

        self._snapshots = snapshots

    @property
    def organizations(self):
        """Gets the organizations of this InlineResponse2008.  # noqa: E501


        :return: The organizations of this InlineResponse2008.  # noqa: E501
        :rtype: InlineResponse2008Organizations
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this InlineResponse2008.


        :param organizations: The organizations of this InlineResponse2008.  # noqa: E501
        :type: InlineResponse2008Organizations
        """
        if organizations is None:
            raise ValueError("Invalid value for `organizations`, must not be `None`")  # noqa: E501

        self._organizations = organizations

    @property
    def users(self):
        """Gets the users of this InlineResponse2008.  # noqa: E501


        :return: The users of this InlineResponse2008.  # noqa: E501
        :rtype: InlineResponse2008Organizations
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InlineResponse2008.


        :param users: The users of this InlineResponse2008.  # noqa: E501
        :type: InlineResponse2008Organizations
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
